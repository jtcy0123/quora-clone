exit
session[:user_id]
n
session[:user_id]
exit
n
logged_in?
exit
logged_in?
continue
exit
a.to_json
a = {id: 9, question_id: 63, user_id: 5, vote: 0}
a.length
a["vote"]
a[:vote]
a
a = @v.to_json
@v.to_json
@v
return @v.to_json
@v.to_json
@v
exit
@v
n
@v
n
@v
params
exit
params
exit
params
@v
exit
@v
n
QuestionVote.find_by(user_id: current_user.id, question_id: params[:id])
params[:id]
current_user.id
@new_vote
@v
exit
@list.question_id(53)
@list.question_id = 53
@list.question_id
@list.find_by_question_id(53)
@list.find_by_question_id(1)
@list
exit
@votes[51]
@votes[50]
@votes
exit
@votes[50]
@votes.50
@votes
exit
@votes
exit
n
exit
n
data
hash.to_json
exit
total = QuestionVote.where(question_id: params[:id]).sum(:vote)
total = QuestionVote.where(question_id: params[:id]).sum(vote)
total = QuestionVote.where(question_id: params[:id]).count(:conditions => "vote > 0")
total = QuestionVote.where(question_id: params[:id]).count(vote > 0)
total = QuestionVote.where(question_id: params[:id])
total = QuestionVote.where(question_id: params[:id]
total = QuestionVote.where("vote > 0").count(:conditions => "question_id = params[:id]")
total = QuestionVote.where("vote > 0").count(:conditions => "question_id: params[:id]")
total = QuestionVote.where("vote > 0").count(:conditions => question_id: params[:id])
total = QuestionVote.where("vote > 0").count(question_id: params[:id])
total = QuestionVote.where("vote > 0").count("question_id"=> params[:id])
total = QuestionVote.where("vote > 0").count("question_id"= params[:id])
total = QuestionVote.where("vote > 0").count("question_id": params[:id])
total = QuestionVote.where("vote > 0").count(question_id: params[:id])
total = QuestionVote.where("vote > 0").count("question_id" = params[:id])
total = QuestionVote.where("vote > 0").count("question_id = params[:id]")
total = QuestionVote.where("vote > 0").count(question_id: params[:id])
total = QuestionVote.where("vote > 0")
total = QuestionVote.where(:vote > 0)
total = QuestionVote.where(vote > 0)
total = QuestionVote.count(:conditions => "question_id => params[:id] AND vote > 0")
total = QuestionVote.count(:conditions => "question_id => params[:id] AND vote > 0)
a.update_attributes(vote: 1)
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
a.update_attributes(vote: 1)
a = QuestionVote.find_or_create_by(user_id: 2, question_id: params[:id])
request.xhr?
xhr?
request
a.update_attributes(vote: 0)
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
a = = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
b = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
a.update_attributes(vote: 1)
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
a
numVote = Question.find(params[:id]).vote
upvotes = Question.find(params[:id]).upvote_count
request.xhr?
a.update_attributes(vote: 1)
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
params
exit
request.xhr?
a.update_attributes(vote: 1)
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
exit
request.xhr?
request.xhr
a
a.update_attributes(vote: 1)
a
a = QuestionVote.find_or_create_by(user_id: current_user.id, question_id: params[:id])
a = current_user.QuestionVote.find_or_create_by(question_id: params[:id])
a = QuestionVote.find_or_create_by(question_id: params[:id])
@vote = current_user.question_votes.find_or_create_by(question_id: params[:id])
current_user.question_votes
current_user
exit
a.update_attributes(vote: 1)
a = QuestionVote.find_by(question_id: params[:id])
a
a.update_attributes(vote: 1)
a = QuestionVote.where(question_id: params[:id])
QuestionVote.where(user_id: current_user.id, question_id: params[:id])
params
question_votes
current_user
exit
@question.errors.full_messages
@question
n
params[:question][:description]
params[:question]
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
q
params
exit
params
exit
params[:user]
params
return @user.update(params[:user])
@user = User.find(params[:id])
n
user
params[:user]
user.update(params[:user])
user = User.find(params[:id])
User.find(params[:id])
params
exit
Answer.new({":content"=>"answeranswer", "user_id"=>4})
Answer.new({":question_id"=>42, ":content"=>"answeranswer", "user_id"=>4})
Answer.new({":question_id"=>"42", ":content"=>"answeranswer", "user_id"=>4})
Answer.new
Answer.new(params[:answer])
params[:answer]
params
n
params
q
a
a.user_id = params[:id]
a = Question.new(params[:question])
q
q.user_id = params[:id]
q.user_id
params[:id]
q = Question.new(params[:question])
Question.new(params[:question],user_id: params[:id])
Question.new(params[:question])
params[:question]
params
exit
n
current_user.id
n
current_user.id
n
current_user.id
current_user
users[:id]
:id
id
params
exit
current_user.first_name
current_user
@user
exit
@user
params
current_user
exit
current_user.id == params[:id].to_i
current_user.id
params[:id]
current_user
exit
n
current_user
kdjd
.exitexit
current_usercuuuuurrent_usercuuunuuuuuuuuuuucurrent_usercurccurrenntei
sessionexitexit
current_user
params[:id] == 2current_usercurrent_user
params[:id] == 2
params[:id]
params.id
current_user.id == params.id
current_user.id
params
current_user
exit
@current_user
session
session[:user_id]
:user_id
@current_user
session = nil
session
@current_user
exit
logged_in?
params
@user
user
exit
@current_user
n
session
